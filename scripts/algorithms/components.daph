#-------------------------------------------------------------
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
# Modifications Copyright 2022 The DAPHNE Consortium
#
#-------------------------------------------------------------

# Computes the connected components of a graph and returns a
# vector indicating the assignment of vertices to components,
# where each component is identified by the maximum vertex ID
# (i.e., row/column position of the input graph) 

maxi = 19; # unlimited
verbose = true;
t1_read = now();
# read sparse graph
G = readMatrix($G);
t2_read = now();
# initialize state with vertex ids
c = seq(1.0, nrow(G), 1.0);
diff = as.f64(nrow(G));
iter = 1;
t1 = now();
# iterative computation of connected components
for(iter in 1:maxi) {
    ti0 = now();
    u = max(aggMax(G * t(c), 0), c);
    diff = sum(u != c);
    c = u; # update assignment
    ti1 = now();
    if( verbose ) {
        print("Connected components: iter = ",0,0); print(iter+", #diff = "+diff,0,0);
        print(",   #duration[ms]: ", 0, 0);
        print((ti1 - ti0)*10.0^(-6));
    }
}
t2 = now();
# write vertex assignment
writeMatrix(c, $C);

print("Read: " , 0);
print((t2_read - t1_read)/ 1000000000.0);
print("Compute: ", 0);
print((t2 - t1)/ 1000000000.0);
